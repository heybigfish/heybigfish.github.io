<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的生活~</title>
  
  
  <link href="https://heybigfish.github.io/atom.xml" rel="self"/>
  
  <link href="https://heybigfish.github.io/"/>
  <updated>2021-07-19T06:30:28.201Z</updated>
  <id>https://heybigfish.github.io/</id>
  
  <author>
    <name>bigfish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript-基础</title>
    <link href="https://heybigfish.github.io/2021/07/19/TypeScript-%E5%9F%BA%E7%A1%80/"/>
    <id>https://heybigfish.github.io/2021/07/19/TypeScript-%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-19T03:43:54.000Z</published>
    <updated>2021-07-19T06:30:28.201Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JavaScript 的特性</strong></p><ul><li>它没有类型约束，一个变量可能初始化时是字符串，又被赋值为数字。</li><li>存在大量的隐士转换，变量类型难以确定。</li><li>原型上的属性或方法可以在运行时被修改。</li><li>解释性语言，没有编译阶段，属于动态类型。（运行时报错）</li></ul><p><strong>TypeScript 的特性</strong></p><ul><li>TypeScript 是添加了类型系统的 JavaScript，适用于任何规模的项目。</li><li>静态类型，「类型」是 TypeScript 最核心的特性，运行前需要先编译为 JavaScript，而在编译阶段就会进行类型检查。</li><li>弱类型，完全兼容 JavaScript ，不会修改 JavaScript 运行时的特性。</li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h3><p>JavaScript 的类型分为两种：原始数据类型（Primitive data types）和对象类型（Object types）。<br>原始数据类型包括：布尔值、数值、字符串、null、undefined 以及 ES6 中的新类型 Symbol 和 ES10 中的新类型 BigInt。</p><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>布尔值时最基础的数据类型。</p><pre><code class="ts">let show: boolean = false;// 编译通过</code></pre><p>需要注意的是，构造函数 <code>Boolean</code> 创造的是一个 <code>Boolean</code> 对象,并不是布尔值。</p><pre><code class="ts">let createBoolean: Boolean = new Boolean(true);//  Boolean &#123;true&#125;</code></pre><p>直接调用会 <code>Boolean</code> 则可以返回 <code>boolean</code> 值。</p><pre><code class="ts">let createBoolean: boolean = Boolean(true);// true</code></pre><h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><pre><code class="ts">let decLiteral: number = 6;let hexLiteral: number = 0xf00d;// ES6 中的二进制表示法let binaryLiteral: number = 0b1010;// ES6 中的八进制表示法let octalLiteral: number = 0o744;let notANumber: number = NaN;let infinityNumber: number = Infinity;</code></pre><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="ts">let name: string = &quot;Tree&quot;;</code></pre><h4 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h4><p><code>JavaScript</code> 没有空值(Viid)的概念，在 <code>TypeScript</code> 中，可以使用 <code>void</code> 表示没有任何返回值的函数：</p><pre><code class="ts">function count(): void &#123;  let num: number = 0;  num++;&#125;</code></pre><p>声明没有返回值函数存在意义，声明 <code>void</code> 变量则没有意义，只能将它赋值给 <code>undefined</code> 和 <code>null</code></p><pre><code class="ts">let unusable: void = undefined;let unvalue: void = null;</code></pre><h4 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h4><p>在 <code>TypeScript</code> 中，可以使用 <code>null</code> 和 <code>undefined</code> 来定义这两个原始数据类型：</p><pre><code class="ts">let u: undefined = undefined;let n: null = null;</code></pre><p>与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 <strong>任意</strong> 类型的变量：</p><pre><code class="ts">// 这样不会报错let num: number = undefined;</code></pre><h3 id="任意值"><a href="#任意值" class="headerlink" title="任意值"></a>任意值</h3><p>普通类型，在赋值过程中改变类型是不被允许的，。<br>如果是 <code>any</code> 类型，则允许被赋值为<strong>任意类型</strong>，声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。</p><p>任意值上访问任何熟悉都是允许的。</p><pre><code class="ts">let number: string = &quot;1&quot;;number = 1;let anyThing: any = &quot;hello&quot;;console.log(anyThing.number);console.log(anyThing.number.age);</code></pre><p>也允许调用任何方法：</p><pre><code class="ts">let anyThing: any = &quot;sleep&quot;;anyThing.time(&quot;1000&quot;);anyThing.time(&quot;1000&quot;).do();</code></pre><p><strong>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型</strong></p><pre><code class="ts">let something;something = &quot;1&quot;;something = 1;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;JavaScript 的特性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它没有类型约束，一个变量可能初始化时是字符串，又被赋值为数字。&lt;/li&gt;
&lt;li&gt;存在大量的隐士转换，变量类型难以确定。&lt;/li&gt;
&lt;li&gt;原型上的属性或方法可以在运行时被修改。&lt;/l</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://heybigfish.github.io/categories/TypeScript/"/>
    
    
    <category term="基础" scheme="https://heybigfish.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://heybigfish.github.io/2021/07/19/hello-world/"/>
    <id>https://heybigfish.github.io/2021/07/19/hello-world/</id>
    <published>2021-07-19T03:40:21.491Z</published>
    <updated>2021-07-19T03:40:21.491Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Hexo2" scheme="https://heybigfish.github.io/categories/Hexo2/"/>
    
    
    <category term="Test2" scheme="https://heybigfish.github.io/tags/Test2/"/>
    
  </entry>
  
  <entry>
    <title>Hello bigfish</title>
    <link href="https://heybigfish.github.io/2021/07/13/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/"/>
    <id>https://heybigfish.github.io/2021/07/13/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/</id>
    <published>2021-07-13T02:02:19.000Z</published>
    <updated>2021-07-19T03:40:21.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hi"><a href="#hi" class="headerlink" title="hi"></a>hi</h2><h3 id="bigfish"><a href="#bigfish" class="headerlink" title="bigfish"></a>bigfish</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;hi&quot;&gt;&lt;a href=&quot;#hi&quot; class=&quot;headerlink&quot; title=&quot;hi&quot;&gt;&lt;/a&gt;hi&lt;/h2&gt;&lt;h3 id=&quot;bigfish&quot;&gt;&lt;a href=&quot;#bigfish&quot; class=&quot;headerlink&quot; title=&quot;bigfish&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="Hexo" scheme="https://heybigfish.github.io/categories/Hexo/"/>
    
    
    <category term="Test" scheme="https://heybigfish.github.io/tags/Test/"/>
    
  </entry>
  
</feed>
