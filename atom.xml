<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的生活~</title>
  
  
  <link href="https://heybigfish.github.io/atom.xml" rel="self"/>
  
  <link href="https://heybigfish.github.io/"/>
  <updated>2021-07-19T08:38:25.190Z</updated>
  <id>https://heybigfish.github.io/</id>
  
  <author>
    <name>bigfish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript-基础</title>
    <link href="https://heybigfish.github.io/2021/07/19/TypeScript-%E5%9F%BA%E7%A1%80/"/>
    <id>https://heybigfish.github.io/2021/07/19/TypeScript-%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-19T03:43:54.000Z</published>
    <updated>2021-07-19T08:38:25.190Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JavaScript 的特性</strong></p><ul><li>它没有类型约束，一个变量可能初始化时是字符串，又被赋值为数字。</li><li>存在大量的隐士转换，变量类型难以确定。</li><li>原型上的属性或方法可以在运行时被修改。</li><li>解释性语言，没有编译阶段，属于动态类型。（运行时报错）</li></ul><p><strong>TypeScript 的特性</strong></p><ul><li>TypeScript 是添加了类型系统的 JavaScript，适用于任何规模的项目。</li><li>静态类型，「类型」是 TypeScript 最核心的特性，运行前需要先编译为 JavaScript，而在编译阶段就会进行类型检查。</li><li>弱类型，完全兼容 JavaScript ，不会修改 JavaScript 运行时的特性。</li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h3><p>JavaScript 的类型分为两种：原始数据类型（Primitive data types）和对象类型（Object types）。<br>原始数据类型包括：布尔值、数值、字符串、null、undefined 以及 ES6 中的新类型 Symbol 和 ES10 中的新类型 BigInt。</p><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>布尔值时最基础的数据类型。</p><pre><code class="ts">let show: boolean = false;// 编译通过</code></pre><p>需要注意的是，构造函数 <code>Boolean</code> 创造的是一个 <code>Boolean</code> 对象,并不是布尔值。</p><pre><code class="ts">let createBoolean: Boolean = new Boolean(true);//  Boolean &#123;true&#125;</code></pre><p>直接调用会 <code>Boolean</code> 则可以返回 <code>boolean</code> 值。</p><pre><code class="ts">let createBoolean: boolean = Boolean(true);// true</code></pre><h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><pre><code class="ts">let decLiteral: number = 6;let hexLiteral: number = 0xf00d;// ES6 中的二进制表示法let binaryLiteral: number = 0b1010;// ES6 中的八进制表示法let octalLiteral: number = 0o744;let notANumber: number = NaN;let infinityNumber: number = Infinity;</code></pre><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="ts">let name: string = &quot;Tree&quot;;</code></pre><h4 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h4><p><code>JavaScript</code> 没有空值(Viid)的概念，在 <code>TypeScript</code> 中，可以使用 <code>void</code> 表示没有任何返回值的函数：</p><pre><code class="ts">function count(): void &#123;  let num: number = 0;  num++;&#125;</code></pre><p>声明没有返回值函数存在意义，声明 <code>void</code> 变量则没有意义，只能将它赋值给 <code>undefined</code> 和 <code>null</code></p><pre><code class="ts">let unusable: void = undefined;let unvalue: void = null;</code></pre><h4 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h4><p>在 <code>TypeScript</code> 中，可以使用 <code>null</code> 和 <code>undefined</code> 来定义这两个原始数据类型：</p><pre><code class="ts">let u: undefined = undefined;let n: null = null;</code></pre><p>与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 <strong>任意</strong> 类型的变量：</p><pre><code class="ts">// 这样不会报错let num: number = undefined;</code></pre><h3 id="任意值"><a href="#任意值" class="headerlink" title="任意值"></a>任意值</h3><p>普通类型，在赋值过程中改变类型是不被允许的，。<br>如果是 <code>any</code> 类型，则允许被赋值为<strong>任意类型</strong>，声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。</p><p>任意值上访问任何熟悉都是允许的。</p><pre><code class="ts">let number: string = &quot;1&quot;;number = 1;let anyThing: any = &quot;hello&quot;;console.log(anyThing.number);console.log(anyThing.number.age);</code></pre><p>也允许调用任何方法：</p><pre><code class="ts">let anyThing: any = &quot;sleep&quot;;anyThing.time(&quot;1000&quot;);anyThing.time(&quot;1000&quot;).do();</code></pre><p><strong>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型</strong></p><pre><code class="ts">let something;something = &quot;1&quot;;something = 1;</code></pre><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p><code>TypeScript</code> 会在没有明确的指定类型的时候,根据赋值推测出一个类型。<br>如果定义的时候没有赋值，都会被推断成 any 类型而完全不被类型检查</p><pre><code class="ts">let num;num = &quot;7&quot;;num = 7;</code></pre><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>联合类型,表示取值可以为多种类型中的一种。</p><pre><code class="ts">let num: number | string;num = &quot;1&quot;;num = 1;</code></pre><p><strong>访问联合类型的属性或方法</strong><br>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法：</p><pre><code class="ts">function getLength(e: string | number) &#123;  return e.length;&#125;// 编译失败。</code></pre><p><code>length</code> 不是<code>number</code>和<code>string</code>的共有属性，所以会报错。</p><pre><code class="ts">function toString(e: string | number) &#123;  return e.toString();&#125;// 编译成功，toString() 是共有属性。</code></pre><p>当联合类型的变量在赋值的时候，会根据类型推断出一个类型。</p><pre><code class="ts">let num: string | number;num = &quot;1&quot;;console.log(num.length); // 编译成功，类型推断为 string，访问length成功。num = 1;console.log(num.length); // 编译报错，类型推断为 number，访问length失败。</code></pre><h3 id="对象的类型-接口-Interfaces"><a href="#对象的类型-接口-Interfaces" class="headerlink" title="对象的类型 - 接口 (Interfaces)"></a>对象的类型 - 接口 (Interfaces)</h3><p>在 <code>TypeScript</code> 中，使用接口来定义对象的类型，结构。</p><pre><code class="ts">interface Person &#123;  name: string;  age: number;&#125;let tom: Person = &#123;  name: &quot;Tom&quot;,  age: 25,&#125;;</code></pre><p>上面的例子中，我们定义了一个接口 <code>Person</code>，接着定义了一个变量 <code>tom</code>，它的类型是 <code>Person</code>。这样，我们就约束了 <code>tom</code> 的形状必须和接口 <code>Person</code> 一致。</p><p><strong>赋值的时候，变量的形状必须和接口的形状保持一致</strong><br>对象定义的变量比接口少或者多一些属性是不允许的。</p><h4 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h4><p>有时我们希望不要完全匹配一个形状，那么可以用可选属性：</p><pre><code class="ts">interface Person &#123;  name: string;  age?: number;&#125;let tom: Person = &#123;  name: &quot;Tom&quot;,&#125;;let Jenny: Person = &#123;  name: &quot;Jenny&quot;,  age: 21,&#125;;</code></pre><p>使用<code>?</code>修饰的变量，可以不存在，但是 <strong>仍然不允许添加未定义的属性。</strong></p><h4 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h4><p>如果希望接口中允许存在任意属性的变量，可以使用<code>[propName: string]: any]</code> 进行修饰。</p><pre><code class="ts">interface Person &#123;  name: string;  age?: number;  [propName: string]: any;&#125;let tom: Person = &#123;  name: &quot;Tom&quot;,  gender: &quot;male&quot;,&#125;;</code></pre><p>注意：<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：</strong></p><pre><code class="ts">interface Person &#123;  name: string;  age?: number;  [propName: string]: string;&#125;let tom: Person = &#123;  name: &quot;Tom&quot;,  age: 25,  gender: &quot;male&quot;,&#125;;//  编译失败</code></pre><p>上例中，任意属性的值允许是 <code>string</code>，但是可选属性 <code>age</code> 的值却是 <code>number</code>，<code>number</code> 不是 <code>string</code> 的子属性，所以报错了。</p><p>可以使用联合类型进行处理：</p><pre><code class="ts">interface Person &#123;  name: string;  age?: number;  [propName: string]: string | number;&#125;let tom: Person = &#123;  name: &quot;Tom&quot;,  age: 25,  gender: &quot;male&quot;,&#125;;</code></pre><h4 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h4><p>如果希望对象中的部分属性，只能在被创建的时候被赋值，且不能被修改， 可以使用 <code>readonly</code> 进行修饰属性。</p><pre><code class="ts">interface Person &#123;  readonly id: number;  name: string;  age?: number;  [propName: string]: any;&#125;let tom: Person = &#123;  id: 9527,  name: &quot;Tom&quot;,  age: 21,  gender: &quot;male&quot;,&#125;;tom.id = 123; // 编译报错，id为只读属性。</code></pre><h3 id="数组的类型"><a href="#数组的类型" class="headerlink" title="数组的类型"></a>数组的类型</h3><p>在 TypeScript 中，数组的类型有多种定义方式。</p><h4 id="「类型-方括号」"><a href="#「类型-方括号」" class="headerlink" title="「类型 + 方括号」"></a>「类型 + 方括号」</h4><p>最简单、直观的一种方式。</p><pre><code class="ts">let arr: number[] = [1, 2, 3, 4, 5];</code></pre><p>上例中，数组中的每一项都必须是 <code>number</code> 类型。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;JavaScript 的特性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它没有类型约束，一个变量可能初始化时是字符串，又被赋值为数字。&lt;/li&gt;
&lt;li&gt;存在大量的隐士转换，变量类型难以确定。&lt;/li&gt;
&lt;li&gt;原型上的属性或方法可以在运行时被修改。&lt;/l</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://heybigfish.github.io/categories/TypeScript/"/>
    
    
    <category term="基础" scheme="https://heybigfish.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
